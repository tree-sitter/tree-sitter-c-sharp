===================================
If, elif and else directives
===================================

#if WIN32
  string os = "Win32";
#elif MACOS
  string os = "MacOS";
#else
  string os = "Unknown";
#endif

---

(compilation_unit
  (preprocessor_call (if_directive (identifier)))
  (global_statement
    (local_declaration_statement
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier) (equals_value_clause (string_literal))))))
  (preprocessor_call (elif_directive (identifier)))
  (global_statement
    (local_declaration_statement
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier) (equals_value_clause (string_literal))))))
  (preprocessor_call (else_directive))
  (global_statement
    (local_declaration_statement
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier) (equals_value_clause (string_literal))))))
  (preprocessor_call (endif_directive)))

===========================
Complex if conditions
===========================
#if !MACOS
#if WIN32==true
#if !MACOS!=false
#if A && B || C
#if (A)
#if (A || B)
#if (A && B) || C

---
(compilation_unit
  (preprocessor_call
    (if_directive (prefix_unary_expression (identifier))))
  (preprocessor_call
    (if_directive      
      (binary_expression (identifier) (boolean_literal))))
  (preprocessor_call
    (if_directive
      (binary_expression (prefix_unary_expression (identifier)) (boolean_literal))))
  (preprocessor_call
    (if_directive
      (binary_expression (binary_expression (identifier) (identifier)) (identifier))))
  (preprocessor_call
    (if_directive (parenthesized_expression (identifier))))
  (preprocessor_call
    (if_directive
      (parenthesized_expression (binary_expression (identifier) (identifier)))))
  (preprocessor_call
    (if_directive
      (binary_expression
        (parenthesized_expression (binary_expression (identifier) (identifier)))
        (identifier)))))

===========================
Region directives
===========================

#region Here, there, everywhere

// something fast

#endregion

---

(compilation_unit
  (preprocessor_call
    (region_directive (preproc_message)))
  (comment)
  (preprocessor_call (endregion_directive)))

===================================
Define and undefine directives
===================================

#define SOMETHING
#undef BAD

---

(compilation_unit
  (preprocessor_call (define_directive (identifier)))
  (preprocessor_call (undef_directive (identifier))))

===================================
Warning and error directives
===================================

class Of1879 {
#warning This class is bad.
#error Okay, just stop.
}

---

(compilation_unit
  (class_declaration (identifier) (declaration_list
    (preprocessor_call (warning_directive (preproc_message)))
    (preprocessor_call (error_directive (preproc_message))))))

===================================
Line directives
===================================

class Of1879 {
  void AMethod() {
#line 2001 "A Space" // Comment
#line hidden
#line default
  }
}

---

(compilation_unit (class_declaration
  (identifier)
  (declaration_list
    (method_declaration
      (void_keyword)
      (identifier)
      (parameter_list)
      (block
        (preprocessor_call (line_directive (preproc_integer_literal) (preproc_string_literal)) (comment))
        (preprocessor_call (line_directive))
        (preprocessor_call (line_directive)))))))

===================================
Spaces in directives
===================================

class Of1879 {
  void AMethod() {
# line 2001 "A Space"
#  line hidden
#    line default
  }
}

---

(compilation_unit (class_declaration
  (identifier)
  (declaration_list
    (method_declaration
      (void_keyword)
      (identifier)
      (parameter_list)
      (block
        (preprocessor_call (line_directive (preproc_integer_literal) (preproc_string_literal)))
        (preprocessor_call (line_directive))
        (preprocessor_call (line_directive)))))))

===================================
Pragmas
===================================

#pragma warning disable 660,661

---

(compilation_unit
  (preprocessor_call (pragma_directive (preproc_warning_number) (preproc_warning_number))))

===================================
Directives not in strings or comments
===================================

class Of1879 {
  void AMethod() {
    var s = @"Only a string
    #if NOPE
";
    /* Only a comment
    #if NOPE
    */
  }
}

---

(compilation_unit (class_declaration
  (identifier)
  (declaration_list
    (method_declaration
      (void_keyword)
      (identifier)
      (parameter_list)
      (block
        (local_declaration_statement
          (variable_declaration (implicit_type)
            (variable_declarator (identifier)
              (equals_value_clause (verbatim_string_literal)))))
        (comment))))))
